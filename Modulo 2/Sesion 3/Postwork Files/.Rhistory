a <- 1:15
b <- c(1.3, 4.5, 3.2)
a
b
c
c
a
#Tipos de Vectores
a <- 1:15
b <- c(1.3, 4.5, 3.2)
c <- -5:10
c
a
a
a
c
a
d <- 20:1
d
d <- 20:-1
d
a>b
g <- 2:20 %% 2 == 0
g
g = 2:20 %% 2 == 0
g
# Vector de caracteres
c("Suma", "Resta", "Multiplicación", "División")
k
# Ejemplo con vector doble
k = sqrt(2)^2
k
k-2
1/0
-1:1 / 0
sqrt(-1)
0/0
#Devolvera NaN
#Devolvera NaN
-1:2 / 0 == NaN
#Devolvera NaN
-1:2 / 0 == Inf
1/Inf
1/Inf - 2/Inf
3^(-Inf)
3^(Inf)
3^(-Inf)
# Realiza limites al infinito!!!!!!!!!!!!!!
var1 = 4
var1 = 4
if (var1 == 4)
{
var2 = 5
}
var2
1:1
2:2
3:3.2
3:3
# Vector de caracteres
c("Suma", "Resta", "Multiplicación", "División")
l <- NULL
l
c(l,a)
c(a,b)
a
a = c(a,16)
a
a = c(0,a)
a
a[1]
a[2]
a[17]
a[0]
a[18]
a[18] = 20
a
a[0] = -1
a
a[0]
a[1:3]
a[2:4]
a = 1:20
a[2:4]
vectorSalto = 1:20
vectorSalto * 2
vectorSalto * 2 -1
vectorSalto = 1:20 *2
vectorSalto
1:20+1
1:20*7+15
0:20*7+15
1:10 * 2*11
1:10 * 2:11
The preview shows you a rendered HTML copy of the contents of the editor. Consequently, unlike *Knit*, *Preview* does not run any R code chunks. Instead, the output of the chunk when it was last run in the editor is displayed.
a = 1:10
The preview shows you a rendered HTML copy of the contents of the editor. Consequently, unlike *Knit*, *Preview* does not run any R code chunks. Instead, the output of the chunk when it was last run in the editor is displayed.
a = 1:10
a
matrix(datos, nrow = 4, ncol = 3)
datos = 1:12
matrix(datos, nrow = 4, ncol = 3)
matrix(datos, nrow = 4, ncol = 4)
a = matrix(datos, nrow = 4, ncol = 3)
a
c(a)
dim(a)
dim(a).ncol
dim(a)[2]
dim(datos)
b = matrix(11:22, nrow = 4, ncol = 3)
a%*%b
b = matrix(11:26, nrow = 4, ncol = 4)
a%*%b
b = matrix(11:26, nrow = 3, ncol = 4)
b = matrix(11:22, nrow = 3, ncol = 4)
a%*%b
a%*%b
c = matrix(1:16, nrow = 4, ncol = 4)
det(c)
c = matrix(4:20, nrow = 4, ncol = 4)
c
c = matrix(4:19, nrow = 4, ncol = 4)
c
det(c)
c = matrix(1:16, nrow = 4, ncol = 4)
t(c)
wich(c==12)
wich(c==12)
resultado = c(1,-2,0)
matrizc = matrix(c(3,2,-1,2,2,0,5,1,4,-1), ncol = 3, nrow = 3)
matrizc
resultado
resultado = as.matrix(c(1,-2,0))
matrizc
resultado
solve(matrizc,resultado)
matrizc = matrix(c(3,2,-1,2,2,0.5,1,4,-1), ncol = 3, nrow = 3)
resultado = as.matrix(c(1,-2,0))
matrizc
resultado
solve(matrizc,resultado)
base = 1:100
base * !(base%%5)
base * (base%%5)
base * (base%%5) * (base%%2) * (base%%3)
base%%2
!base%%2
!base%%5
base * (!base%%2)
base * (base%%2)
base * (base%%2) * (!base%%3)
base[base%%2 != 0 & base%%3 != 0 & base%%5 != 0]
base[base%%2 != 0 & base%%3 != 0 & base%%5 != 0]
entero = 1:20
flotante = 1:20 * 8.5-0.3
caracteres = as.character(entero+64)
df = data.frame("entero" = entero, "flotante" = flotante, "caracteres" = caracteres)
View(df)
# Creacion de vectores
entero = 1:20
flotante = 1:20 * 8.5-0.3
caracteres = as.character(entero)
df = data.frame("entero" = entero, "flotante" = flotante, "caracteres" = caracteres)
View(df)
caracteres = as.character(c(1:20))
caracteres = as.character(c(1:20+3))
caracteres = as.character(entero
caracteres = as.character(entero)
caracteres <- as.character(entero)
# Creacion de vectores
entero = 1:6
flotante = entero * 8.5-0.3
caracteres = as.character(entero)
df = data.frame("entero" = entero, "flotante" = flotante, "caracteres" = caracteres)
as.character(34)
as.character("h")
vector = 1:10
matriz = matrix (c(1:9),ncol = 3, nrow = 3)
lista = list ("vector" = vector, "matriz" = matriz, "DataFrame" = df)
lista["DataFrame"]
dim(lista)
ej1 = c(1:24*2)
ej1
#Ejercicio 2.-
ej2 = c(3)*3
ej2
#Ejercicio 2.-
ej2 = c(3)%*%c(c)
ej2
#Ejercicio 2.-
ej2 = c(3)%*%c(3)
ej2
#Ejercicio 2.-
ej2 = c(3)%+%c(3,3,3)
ej2
#Ejercicio 2.-
ej2 = c(3,3,3,3)
ej2
# Ejercicio 3.-
ej3 = 1:5
ej3
ej4
# Ejercicio 1.-
ej1 = 1:24*2
ej1
# Ejercicio 2.-
ej2 = 1:4 / 1:4 * 3
ej2
1%%4
2%%4
3%%4
4%%4
# Ejercicio 4.-
ej4 = (1:5+1)%4
# Ejercicio 4.-
ej4 = (1:5+1)%%4
ej4
# Ejercicio 4.-
ej4 = (1:5)%%4+1
ej4
# Ejercicio 4.-
ej4 = (1:5+1)%%4+1
ej4
print("Hello World")
install.packages("shiny")
Sys.getenv("PATH")
install.packages("shiny")
(var.hola <- "Hola Mundo")
(var.number <- 5L)
class(var.number)
class(var.hola)
class(var.double)
(var.double <- 2.7076)
class(var.double)
(var.logical <- T)
(vector <- c(1,2))
class(var.logical)
class(var.logical)
typeof(var.logical)
a <- c(4, 6, 8, 10,12)
b <- c(3, 5, 7, 9)
a[1]
b[4]
c(a,b)
sort(c(a,b), decreasing = F)
?sort
3:12  # asÃ­ de sencillo es
(vector.by2 <- seq(from = 1, to = 10, by =2))
(vector.by3 <- seq(1, 10, 3))
(vector.by2 <- seq(from = 2, to = 10, by =2))
rep(a, 2)
rep(5, times = 6)
(vector.by2 <- seq(from = 20, to = 10, by =2))
(vector.by2 <- seq(from = 20, to = 10, by =-2))
c(1, 2) + c(7, 8, 9, 10)
c(7, 8, 9, 10) + c(1,2)
a + b
a - b
a + b
a - b
a*b
a/b
a^2
a1 <- a*0.5 + b^2
a1[1]
a1 <- a*0.5 + b^2
a1
(m <- matrix(1:9, nrow = 3, ncol = 3))
m[ ,1]
(s.vecmat <- c(1, 2) + m)
(n <- matrix(2:7, 4, 6))
matrix(c(1,0),3)
matrix(c(1,0),3,3)
n[n > 4]
which(n > 4)
which(n > 4)
n>4
a <- 2:6
b <- 5:9
cbind(a,b)
rbind(a,b)
apply(n, 1, mean)
apply(n, 2, sort)
b <- 5:8
cbind(a,b)
n
apply(n, 1, mean)
n[1,]
sort(n[1,])
mean(n[1,])
mean(n[2,])
T(A)
t(A)
t(n)
det(n)
det(n)
n[c(1,2,3,4),]
n[,c(1,2,3,4)]
det(n[,c(1,2,3,4)])
n1 <- n[,c(1,2,3,4)]
i(n1)
?inv
?t
?i
solve(n1)
(milista <- list(nombre = "Pepe", no.hijos = 3, edades.hijos = c(4, 7, 9)))
str(milista)
milista$nombre
milista
x <- 6:8
y <- c("A", "B", "C")
(mifile <- data.frame(edad = x, grupo = y))
str(mifile)
mifile[1]
mifile[,1]
mifile$edad
mifile[1,]
mifile[,2]
mean(mifile$edad)
paste("La media de la edad es:", mean(mifile$edad))
summary(mifile)
mifile$sexo <- c("H", "M", "H")
mifile
mifile$sexo <- NULL
mifile
getwd()
read.csv("bestsellers with categories.csv") # El archivo csv debe estar en el directorio de trabajo
amazon.books <- read.csv("bestsellers with categories.csv")
tail(amazon.books); str(amazon.books)
data.url <- read.csv("https://www.football-data.co.uk/mmz4281/2021/SP1.csv")
data.url
head(data.url)
str(data.url)
# Reto 1
# 1.- Leer el archivo "netflix_titles.csv" desde GitHub
netflix.titles <- read.csv("https://raw.githubusercontent.com/ecoronadoj/Sesion_1/main/Data/netflix_titles.csv")
# 2.- Obtener la dimensión y el tipo de objeto que se obtiene
dim(netflix.titles); class(netflix.titles)
summary(netflix.titles)
str(netflix.titles)
netflix.titles[netflix.titles$release_year>2015]
wich(netflix.titles$release_year>2015)
witch(netflix.titles$release_year>2015)
which(netflix.titles$release_year>2015)
netflix.titles$release_year>2015
netflic[netflix.titles$release_year>2015]
netflix.titles[netflix.titles$release_year>2015]
which(netflix.titles$release_year>2015)
cols <- which(netflix.titles$release_year>2015)
class(cols)
cols
dim(cols)
lenght(cols)
length(cols)
netflix.titles[cols]
netflix.titles[,cols]
netflix.titles[,1]
netflix.titles[cols,]
net.2015 <- netflix.titles[cols,]
write.csv(net.2015)
?write.csv
write.csv(net.2015,file = res.netflix.csv)
write.csv(net.2015,file = "res.netflix.csv")
library(ggplot2) # Se omite el uso de las comillas
install.packages("ggplot2") #siempre lleva  comillas
install.packages("dplyr")
library(dplyr)
library(ggplot2) # Se omite el uso de las comillas
w <- rnorm(20)
print("Este loop calcula el cuadrado de los 10 primeros elementos del vector w")
wsq <- 0
for(i in 1:10) {
wsq[i] <- w[i]**2
print(wsq[i])
}
w <- rnorm(20)
print("Este loop calcula el cuadrado de los 10 primeros elementos del vector w")
wsq <- 0
for(i in 1:10) {
wsq[i] <- w[i]**2
print(wsq[i])
}
w
w**2
rep(2,3)
rep("hola",3)
?runif
(ran <- rnorm(44))
ran1 <- 0
for (i in 1:15)
ran1[i] <- ran[i]**3 + 12
ran1 <- 0
for (i in 1:15)
{
ran1[i] <- ran[i]**3 + 12
}
ran1
(df.al <- data.frame(ran = ran[1:15], ran1 = ran1))
amazon.best <- read.csv("https://raw.githubusercontent.com/ecoronadoj/Sesion_1/main/Data/bestsellers%20with%20categories.csv")
# 2.- Calcula el data frame transpuesto, asígnale el nombre de tAmazon y conviértelo en un data frame
tAmazon <- t(amazon.best)
tAmazon
1/0
?mean
??mean
setwd("C:/Users/alana/Documents/GitHub/Data-Science/Modulo 2/Sesion 3/Postwork Files")
lista <- lapply(dir(), read.csv)
lista <- lapply(lista, select, Date,HomeTeam,AwayTeam,FTHG,FTAG,FTR)
# Postwork Sesión 3
# Equipo 12
# 1.- Con el último data frame obtenido en el postwork de la sesión 2, elabora
#     tablas de frecuencias relativas para estimar las siguientes probabilidades:
library(dplyr)
lista <- lapply(lista, select, Date,HomeTeam,AwayTeam,FTHG,FTAG,FTR)
lista[[1]] <- mutate(lista[[1]], Date = as.Date(Date, "%d/%m/%y"))
lista[[2]] <- mutate(lista[[2]], Date = as.Date(Date, "%d/%m/%Y"))
lista[[3]] <- mutate(lista[[3]], Date = as.Date(Date, "%d/%m/%Y"))
data <- do.call(rbind, lista)
shape(data)
?shape
dim(data)
head(data)
tail(data)
round(table(FTHG)/length(FTHG),2)
round(table(FTHG)/length(data$FTHG),2)
round(table(FTHG)/length(data$FTHG),2)
FTHG <- data$FTHG
FTAG <- data$FTAG
round(table(FTHG)/length(FTHG),2)
class(round(table(FTHG)/length(FTHG),2))
plot(round(table(FTHG)/length(FTHG),2))
# 1.1.- La probabilidad (marginal) de que el equipo que juega en casa anote x goles (x=0,1,2,)
houseGols = round(table(FTHG)/length(FTHG),2)
# 1.2.- La probabilidad (marginal) de que el equipo que juega como visitante anote y goles (y=0,1,2,)
awayGols = round(table(FTAG)/length(FTAG),2)
lista <- lapply(dir(), read.csv)
lista <- lapply(lista, select, Date,HomeTeam,AwayTeam,FTHG,FTAG,FTR)
lista[[1]] <- mutate(lista[[1]], Date = as.Date(Date, "%d/%m/%y"))
lista[[2]] <- mutate(lista[[2]], Date = as.Date(Date, "%d/%m/%Y"))
lista[[3]] <- mutate(lista[[3]], Date = as.Date(Date, "%d/%m/%Y"))
data <- do.call(rbind, lista)
FTHG <- data$FTHG
FTAG <- data$FTAG
# 1.1.- La probabilidad (marginal) de que el equipo que juega en casa anote x goles (x=0,1,2,)
houseGols = round(table(FTHG)/length(FTHG),2)
# 1.2.- La probabilidad (marginal) de que el equipo que juega como visitante anote y goles (y=0,1,2,)
awayGols = round(table(FTAG)/length(FTAG),2)
# 1.3.- La probabilidad (conjunta) de que el equipo que juega en casa anote x goles y el equipo que
#       juega como visitante anote y goles (x=0,1,2,, y=0,1,2,)
jointProbability = round(table(FTHG,FTAG)/length(FTAG),2)
jointProbability
plot(jointProbability)
library(ggplot2)
heatmap(jointProbability)
# 2.- Realiza lo siguiente:
# 2.1.- Un gráfico de barras para las probabilidades marginales estimadas del número de goles que
#       anota el equipo de casa
p <- plot(houseGols) +
ggtitle("Probabilidad marginal estimada del número de goles que anota el equipo de casa")
# 2.- Realiza lo siguiente:
# 2.1.- Un gráfico de barras para las probabilidades marginales estimadas del número de goles que
#       anota el equipo de casa
p <- ggplot(houseGols) +
ggtitle("Probabilidad marginal estimada del número de goles que anota el equipo de casa")
# 2.- Realiza lo siguiente:
# 2.1.- Un gráfico de barras para las probabilidades marginales estimadas del número de goles que
#       anota el equipo de casa
p <- plot(houseGols) +
title("Probabilidad marginal estimada del número de goles que anota el equipo de casa")
p
# 2.- Realiza lo siguiente:
# 2.1.- Un gráfico de barras para las probabilidades marginales estimadas del número de goles que
#       anota el equipo de casa
p <- plot(houseGols) +
title("Probabilidad marginal estimada del número de goles que anota el equipo de casa")
p
plot(houseGols) +
title("Probabilidad marginal estimada del número de goles que anota el equipo de casa")
xlab("Goles Anotados") +
ylab("Probabilidad")
theme_light() +
xlab('Goles Anotados') +
ylab('Probabilidad')
p
# 2.- Realiza lo siguiente:
# 2.1.- Un gráfico de barras para las probabilidades marginales estimadas del número de goles que
#       anota el equipo de casa
p <- plot(houseGols, main = "Probabilidad Marginal Estimada del Número de Goles que Anota el Equipo de Casa",
xlab = "Goles Anotados", ylab = "Probabilidad")
p
# 2.- Realiza lo siguiente:
# 2.1.- Un gráfico de barras para las probabilidades marginales estimadas del número de goles que
#       anota el equipo de casa
p <- plot(houseGols, main = "Probabilidad Marginal Estimada del Número de Goles que Anota el Equipo de Casa",
xlab = "Goles Anotados", ylab = "Probabilidad") + theme_classic()
p
# 2.- Realiza lo siguiente:
# 2.1.- Un gráfico de barras para las probabilidades marginales estimadas del número de goles que
#       anota el equipo de casa
p <- plot(houseGols, main = "Probabilidad Marginal Estimada del Número de Goles que Anota el Equipo de Casa",
xlab = "Goles Anotados", ylab = "Probabilidad")
p
p <- plot(houseGols, main = "Probabilidad Marginal Estimada del Número de Goles que Anota el Equipo Visitante",
xlab = "Goles Anotados", ylab = "Probabilidad")
p
p <- plot(awayGols, main = "Probabilidad Marginal Estimada del Número de Goles que Anota el Equipo Visitante",
xlab = "Goles Anotados", ylab = "Probabilidad")
# 2.3.- Un HeatMap para las probabilidades conjuntas estimadas de los números de goles que anotan el equipo de
#       casa y el equipo visitante en un partido.
p <- heatmap(jointProbability)
p
