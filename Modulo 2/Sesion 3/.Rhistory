xlab("Mediciones") +
geom_vline(xintercept =  mean(data2$Age), col = "red", lwd = 1.5, lty =2)+
theme_light()
data2 %>%
ggplot() +
aes(Age) +
geom_histogram(binwidth = 10, fill = "blue") +
ggtitle("Histograma de Mediciones") +
ylab("Frecuencia") +
xlab("Mediciones") +
geom_vline(xintercept =  mean(data2$Age), col = "red", lwd = 1.5, lty =2)+
theme_light()
data2 %>%
ggplot() +
aes(Age) +
geom_histogram(binwidth = 1, fill = "blue") +
ggtitle("Histograma de Mediciones") +
ylab("Frecuencia") +
xlab("Mediciones") +
geom_vline(xintercept =  mean(data2$Age), col = "red", lwd = 1.5, lty =2)+
theme_light()
data2 %>%
ggplot() +
aes(Age) +
geom_histogram(binwidth = 2, fill = "blue") +
ggtitle("Histograma de Mediciones") +
ylab("Frecuencia") +
xlab("Mediciones") +
geom_vline(xintercept =  mean(data2$Age), col = "red", lwd = 1.5, lty =2)+
theme_light()
data2 %>%
ggplot() +
aes(Age) +
geom_histogram(binwidth = 2, fill = "blue") +
ggtitle("Histograma de Mediciones") +
ylab("Frecuencia") +
xlab("Mediciones") +
geom_vline(xintercept =  na.omit(mean(data2$Age)), col = "red", lwd = 1.5, lty =2)+
theme_light()
data2 %>%
ggplot() +
aes(Age) +
geom_histogram(binwidth = 2, fill = "blue") +
ggtitle("Histograma de Mediciones") +
ylab("Frecuencia") +
xlab("Mediciones") +
geom_vline(xintercept =  na.omit(mean(data2$Age)), col = "red", lwd = 1.5, lty =2)+
theme_light()
data2 %>%
ggplot() +
aes(Age) +
geom_histogram(binwidth = 2, fill = "blue") +
ggtitle("Histograma de Mediciones") +
ylab("Frecuencia") +
xlab("Mediciones") +
geom_vline(xintercept =  mean(na.omit(data2$Age)), col = "red", lwd = 1.5, lty =2)+
theme_light()
(my_scatplot <- ggplot(mtcars,
aes(x = wt, y = mpg)) +
geom_point())
(my_scatplot <- ggplot(data2,
aes(x = Weight, y = Height)) +
geom_point())
?which.max
which.max(data2$Height)
pos <- which.max(data2$Height)
paste("El jugador más alto es: ",data2$Name[pos])
paste("El jugador más alto es: ",data2$Name[pos],", con una altura de: ",data2$Height)
paste("El jugador más alto es: ",data2$Name[pos],", con una altura de: ",data2$Height[pos])
paste("El jugador más bajito es: ",data2$Name[pos],", con una altura de: ",data2$Height[pos])
pos <- which.min(data2$Height)
paste("El jugador más bajito es: ",data2$Name[pos],", con una altura de: ",data2$Height[pos])
paste("La altura promedio es: ",mean(na.omit(data2$Height)))
data2 %>% ggplot( aes(AST.TOV, PTS )) +
geom_point() +
facet_wrap("Pos")
data <- read.csv("C:/Users/alana/Documents/GitHub/Data-Science/Modulo 2/Sesion 3/Data/boxp.csv")
library(ggplot2)
library(dplyr)
head(data2)
data2 <- read.csv("C:/Users/alana/Documents/GitHub/Data-Science/Modulo 2/Sesion 3/Data/boxp.csv")
head(data2)
names(data2)
data <- mutate(data2, Mediciones = Mediciones*1.23)
head(data)
summary(data)
bien <- complete.cases(data)
data <- data[bien,]
data <- mutate(data, Categoria = factor(Categoria), Grupo = factor(Grupo))
head(data)
ggplot(data, aes(x = Categoria, y = Mediciones, fill = Grupo)) + geom_boxplot() +
ggtitle("Boxplots") +
xlab("Categorias") +
ylab("Mediciones")
ggplot(data, aes(x = Categoria, y = Mediciones, fill = Grupo)) + geom_boxplot() +
scale_fill_discrete(name = "Dos Gps", labels = c("G1", "G2")) +
ggtitle("Boxplots") +
xlab("Categorias") +
ylab("Mediciones")
library(dplyr)
getwd()
setwd("C:/Users/alana/Documents/GitHub/Data-Science/Modulo 2/Sesion 3")
url1 <- "https://data.humdata.org/hxlproxy/data/download/time_series_covid19_confirmed_global_narrow.csv?dest=data_edit&filter01=explode&explode-header-att01=date&explode-value-att01=value&filter02=rename&rename-oldtag02=%23affected%2Bdate&rename-newtag02=%23date&rename-header02=Date&filter03=rename&rename-oldtag03=%23affected%2Bvalue&rename-newtag03=%23affected%2Binfected%2Bvalue%2Bnum&rename-header03=Value&filter04=clean&clean-date-tags04=%23date&filter05=sort&sort-tags05=%23date&sort-reverse05=on&filter06=sort&sort-tags06=%23country%2Bname%2C%23adm1%2Bname&tagger-match-all=on&tagger-default-tag=%23affected%2Blabel&tagger-01-header=province%2Fstate&tagger-01-tag=%23adm1%2Bname&tagger-02-header=country%2Fregion&tagger-02-tag=%23country%2Bname&tagger-03-header=lat&tagger-03-tag=%23geo%2Blat&tagger-04-header=long&tagger-04-tag=%23geo%2Blon&header-row=1&url=https%3A%2F%2Fraw.githubusercontent.com%2FCSSEGISandData%2FCOVID-19%2Fmaster%2Fcsse_covid_19_data%2Fcsse_covid_19_time_series%2Ftime_series_covid19_confirmed_global.csv"
url2 <- "https://data.humdata.org/hxlproxy/data/download/time_series_covid19_deaths_global_narrow.csv?dest=data_edit&filter01=explode&explode-header-att01=date&explode-value-att01=value&filter02=rename&rename-oldtag02=%23affected%2Bdate&rename-newtag02=%23date&rename-header02=Date&filter03=rename&rename-oldtag03=%23affected%2Bvalue&rename-newtag03=%23affected%2Binfected%2Bvalue%2Bnum&rename-header03=Value&filter04=clean&clean-date-tags04=%23date&filter05=sort&sort-tags05=%23date&sort-reverse05=on&filter06=sort&sort-tags06=%23country%2Bname%2C%23adm1%2Bname&tagger-match-all=on&tagger-default-tag=%23affected%2Blabel&tagger-01-header=province%2Fstate&tagger-01-tag=%23adm1%2Bname&tagger-02-header=country%2Fregion&tagger-02-tag=%23country%2Bname&tagger-03-header=lat&tagger-03-tag=%23geo%2Blat&tagger-04-header=long&tagger-04-tag=%23geo%2Blon&header-row=1&url=https%3A%2F%2Fraw.githubusercontent.com%2FCSSEGISandData%2FCOVID-19%2Fmaster%2Fcsse_covid_19_data%2Fcsse_covid_19_time_series%2Ftime_series_covid19_deaths_global.csv"
download.file(url = url1, destfile = "st19ncov-confirmados.csv", mode = "wb")
conf <- read.csv(url1)
mu <- read.csv(url2)
conf <- read.csv(url1)
head(conf)
mu <- read.csv(url2)
Sconf <- conf[-1, ]
Smu <- mu[-1, ]
summary(Sconf)
Sconf <- select(Sconf, Country.Region, Date, Value) # PaÃ­s,
Sconf <- rename(Sconf, Country = Country.Region, Infectados = Value) # Cambiamos el nombre de las variables
Sconf <- mutate(Sconf, Date = as.Date(Date, "%Y-%m-%d"), Infectados = as.numeric(Infectados)) # Transformamos la variable
# Seleccionamos paÃ­s, fecha y acumulado de muertos
Smu <- select(Smu, Country.Region, Date, Value)
Smu <- rename(Smu, Country = Country.Region, Muertos = Value) # Renombramos
Smu <- mutate(Smu, Date = as.Date(Date, "%Y-%m-%d"), Muertos = as.numeric(Muertos)) # Transformamos
# Unimos infectados y muertos acumulados para cada fecha
Scm <- merge(Sconf, Smu)
mex <- filter(Scm, Country == "Mexico") # Seleccionamos sÃ³lo a MÃ©xico
mex <- filter(mex, Infectados != 0) # Comienzan los infectados en MÃ©xico
mex <- mutate(mex, NI = c(1, diff(Infectados))) # Nuevos infectados por dÃ­a
mex <- mutate(mex, NM = c(0, diff(Muertos))) # Nuevos muertos por dÃ­a
mex <- mutate(mex, Letalidad = round(Muertos/Infectados*100, 1)) # Tasa de letalidad
mex <- mutate(mex, IDA = lag(Infectados), MDA = lag(Muertos)) # Valores dÃ­a anterior
mex <- mutate(mex, FCI = Infectados/IDA, FCM = Muertos/MDA) # Factores de Crecimiento
esion_03
write.csv(mex, "../Sesion_03/C19Mexico.csv")
# library(dplyr)
library(ggplot2)
library(scales)
mex <- read.csv("C19Mexico.csv")
mex
head(mex); tail(mex)
mex <- mutate(mex, Date = as.Date(Date, "%Y-%m-%d"))
p <- ggplot(mex, aes(x=Date, y=Infectados)) +
geom_line( color="blue") +
geom_point() +
labs(x = "Fecha",
y = "Acumulado de casos confirmados",
title = paste("Confirmados de COVID-19 en MÃ©xico:",
format(Sys.time(),
tz="America/Mexico_City",
usetz=TRUE))) +
theme(plot.title = element_text(size=12))  +
theme(axis.text.x = element_text(face = "bold", color="#993333" ,
size = 10, angle = 45,
hjust = 1),
axis.text.y = element_text(face = "bold", color="#993333" ,
size = 10, angle = 45,
hjust = 1))  # color, Ã¡ngulo y estilo de las abcisas y ordenadas
p <- p  + scale_x_date(labels = date_format("%d-%m-%Y")) # paquete scales
p <- p +
theme(plot.margin=margin(10,10,20,10), plot.caption=element_text(hjust=1.05, size=10)) +
annotate("text", x = mex$Date[round(dim(mex)[1]*0.4)], y = max(mex$Infectados), colour = "blue", size = 5, label = paste("Ãltima actualizaciÃ³n: ", mex$Infectados[dim(mex)[1]]))
p
p <- ggplot(mex, aes(x=Date, y=Infectados)) +
geom_line( color="blue") +
geom_point() +
labs(x = "Fecha",
y = "Acumulado de casos confirmados",
title = paste("Confirmados de COVID-19 en México:",
format(Sys.time(),
tz="America/Mexico_City",
usetz=TRUE))) +
theme(plot.title = element_text(size=12))  +
theme(axis.text.x = element_text(face = "bold", color="#993333" ,
size = 10, angle = 45,
hjust = 1),
axis.text.y = element_text(face = "bold", color="#993333" ,
size = 10, angle = 45,
hjust = 1))  # color, Ã¡ngulo y estilo de las abcisas y ordenadas
p <- p  + scale_x_date(labels = date_format("%d-%m-%Y")) # paquete scales
p <- p +
theme(plot.margin=margin(10,10,20,10), plot.caption=element_text(hjust=1.05, size=10)) +
annotate("text", x = mex$Date[round(dim(mex)[1]*0.4)], y = max(mex$Infectados), colour = "blue", size = 5, label = paste("Ãltima actualizaciÃ³n: ", mex$Infectados[dim(mex)[1]]))
p
w.brazil <- read.csv("/Data/station_fortaleza.csv")
getwd()
w.brazil <- read.csv("../Data/station_fortaleza.csv")
w.brazil <- read.csv("C:/Users/alana/Documents/GitHub/Data-Science/Modulo 2/Sesion 3/Data/station_fortaleza.csv")
head(w.brazil)
w.brazil <- w.brazil[, -c(1,14:18)]
tail(w.brazil)
class(w.brazil)
plot(w.brazil)
w.brazil <- w.brazil %>% filter(JAN<50,FEB<50,	MAR<50,	APR<50,	MAY<50,	JUN<50,	JUL<50,	AUG<50,	SEP<50,	OCT<50,	NOV<50,	DEC<50)
plot(w.brazil)
bras <- apply(w.brazil, 2, c)
class(bras)
bra1 <-  as.vector(t(bras))
tsb <- ts(bra1, start = c(1946,01), frequency = 12)
class(tsb)
summary(tsb)
start(tsb); end(tsb); frequency(tsb)  # Inicio, fin y frecuencia de la serie
plot(tsb, main = "Serie de tiempo", ylab = "Temp", xlab = "AÃ±o")
plot(tsb, main = "Serie de tiempo", ylab = "Temp", xlab = "Año")
tsbd <- decompose(tsb, type = "additive")
plot(tsbd$trend)  # GrÃ¡fica  de la tendencia
plot(tsbd$seasonal) # GrÃ¡fica  de la temporalidad
plot(tsb, main = "Serie de tiempo", ylab = "Temp", xlab = "Año")
plot(tsbd$trend)  # GrÃ¡fica  de la tendencia
install.packages("TSA")
library(TSA)
AP <- AirPassengers
ts(AP)
plot (ts(AP))
d
d <- decompose(tsb, type = "additive")
d
plot(d)
da <- decompose(apts, type = "additive")
plot(da)
apts <- ts(AP)
da <- decompose(apts, type = "additive")
plot(da)
ts(AP)
plot (ts(AP))
apts <- ts(AP)
plot (apts)
da <- decompose(apts, type = "additive")
da <- decompose(ts(AP), type = "additive")
da <- decompose(AP, type = "additive")
plot(da)
dm <- decompose(AP, type = "additive")
plot(dm)
plot(da)
dm <- decompose(AP, type = "multiplicative")
plot(dm)
plot(da)
plot(dm)
lista <- lapply(dir(), read.csv)
lista <- lapply(lista, select, Date,HomeTeam,AwayTeam,FTHG,FTAG,FTR)
library(ggplot2)
library(reshape2)
dbinom(x = 20, size = 30, prob = 0.2)
pbinom(q = 20, size = 30, prob = 0.6)
qbinom(p = 0.35, size = 30, prob = 0.6) # b = 17
qbinom(p = 0.35, size = 30, prob = 0.2) # b = 17
set.seed(4857) # Establecemos una semilla, para poder reproducir la muestra en el futuro
muestra <- rbinom(n = 1000, size = 30, prob = 0.2)
length(muestra); muestra[1:3]
as.data.frame(table(muestra))
(df1 <- as.data.frame(table(muestra)/length(muestra)))
valg <- as.character(df1$muestra) # distintos valores generados por rbinom
(valg <- as.numeric(valg)) # Convertimos a nÃºmeros
plot(muestra)
plot(table(muestra))
(v1 <- round(sapply(valg, dbinom, size = 30, p = 0.2), 3))
(v1 <- round(sapply(valg, dbinom, size = 30, p = 0.2), 3))
(df2 <- cbind(df1, v1))
(names(df2) <- c("Exitos", "FR", "Prob"))
(df2 <- melt(df2)) # funciÃ³n del paquete reshape2
ggplot(df2, aes(x = Exitos, y = value, fill = variable)) +
geom_bar (stat="identity", position = "dodge") # Funciones del paquete ggplot2
x <- seq(-4, 4, 0.01)*6 + 175 # Algunos posibles valores que puede tomar la v.a. X (mÃ­nimo: mu-4sigma, mÃ¡ximo: mu+4sigma)
x
y <- dnorm(x, mean = 175, sd = 6) # Valores correspondientes de la funciÃ³n de densidad de probabilidad
plot(x, y, type = "l", xlab = "", ylab = "")
title(main = "Densidad de Probabilidad Normal", sub = expression(paste(mu == 175, " y ", sigma == 6)))
abline(v = 175, lwd = 2, lty = 2) # La media es 175
pnorm(q = 180, mean = 175, sd = 6)
par(mfrow = c(2, 2))
plot(x, y, type = "l", xlab = "", ylab = "")
title(main = "Densidad de Probabilidad Normal", sub = expression(paste(mu == 175, " y ", sigma == 6)))
polygon(c(min(x), x[x<=180], 180), c(0, y[x<=180], 0), col="red")
pnorm(q = 165, mean = 175, sd = 6)
plot(x, y, type = "l", xlab = "", ylab = "")
title(main = "Densidad de Probabilidad Normal", sub = expression(paste(mu == 175, " y ", sigma == 6)))
polygon(c(min(x), x[x<=165], 165), c(0, y[x<=165], 0), col="yellow")
pnorm(q = 180, mean = 175, sd = 6) - pnorm(q = 165, mean = 175, sd = 6)
plot(x, y, type = "l", xlab="", ylab="")
title(main = "Densidad de Probabilidad Normal", sub = expression(paste(mu == 175, " y ", sigma == 6)))
polygon(c(165, x[x>=165 & x<=180], 180), c(0, y[x>=165 & x<=180], 0), col="green")
pnorm(q = 182, mean = 175, sd = 6, lower.tail = FALSE)
plot(x, y, type = "l", xlab="", ylab="")
title(main = "Densidad de Probabilidad Normal", sub = expression(paste(mu == 175, " y ", sigma == 6)))
polygon(c(182, x[x>=182], max(x)), c(0, y[x>=182], 0), col="blue")
dev.off() # Para mostrar solo una grÃ¡fica
(b <- qnorm(p = 0.75, mean = 175, sd = 6))
qnorm(p = 0.95, mean = 0, sd = 1)
qnorm(p = 0.05, mean = 0, sd = 1)
qnorm(p = (1-0.025), mean = 0, sd = 1)
(b <- qnorm(p = 0.75, mean = 175, sd = 6))
pnorm(b, 175, 6)
plot(x, y, type = "l", xlab="", ylab="")
title(main = "Densidad de Probabilidad Normal", sub = expression(paste(mu == 175, " y ", sigma == 6)))
axis(side = 1, at = b, font = 2, padj = 1, lwd = 2)
set.seed(7563) # Para poder reproducir la muestra en el futuro
muestra <- rnorm(n = 1000, mean = 175, sd = 6)
length(muestra); mdf <- as.data.frame(muestra)
tail(mdf)
ggplot(mdf, aes(muestra)) +
geom_histogram(colour = 'red',
fill = 'blue',
alpha = 0.3, # Intensidad del color fill
binwidth = 3) +
geom_density(aes(y = 3*..count..))+
geom_vline(xintercept = mean(mdf$muestra), linetype="dashed", color = "black") +
ggtitle('Histograma para la muestra normal') +
labs(x = 'Valores obtenidos', y = 'Frecuencia')+
theme_dark() +
theme(plot.title = element_text(hjust = 0.5, size = 16))
mean <- 175; sd <- 6
x <- seq(mean-4*sd, mean+4*sd, 0.01)
y <- dnorm(x, mean, sd)
plot(x, y, type = "l", xlab="valores", ylab = "", xaxt = "n", yaxt = "n")
title(main = "Densidad de Probabilidad Normal", sub = expression(paste("Regla EmpÃ­rica con ", mu == 175, " y ", sigma == 6)))
abline(v=mean, lty = 2, lwd = 2)
for(k in c(-3, -2, -1, 1, 2, 3)) abline(v = mean+k*sd, lty = 2, col = abs(k))
ps <- c(mean - 3*sd, mean - 2*sd, mean - sd, mean, mean + sd, mean + 2*sd, mean + 3*sd)
axis(side = 1, at = ps)
x0 <- NULL
for(i in 1:length(ps)-1) x0 <- c(x0, (ps[i]+ps[i+1])/2)
y0 <- dnorm(x0, mean, sd)*1/3
text(x = x0, y = y0, labels = c("2.35%", "13.5%", "34%", "34%", "13.5%", "2.35%"))
x1 <- (x[1]+ps[1])/2; y1 <- dnorm(mean, mean, sd)*1/2
xf <- (x[length(x)]+ps[length(ps)])/2; yf <- dnorm(mean, mean, sd)*1/2
text(x = c(x1, xf), y = c(y1, yf), labels = c("0.15%", "0.15%"))
segments(x0 = x1, y0 = 0, x1 = x1, y1 = y1,               # Draw one line as in Example 1
col = "cornflowerblue",                               # Color of line
lwd = 5,                                              # Thickness of line
lty = "dotted")
segments(x0 = xf, y0 = 0, x1 = xf, y1 = yf,
col = "cornflowerblue",
lwd = 5,
lty = "dotted")
x <- seq(-4, 4, 0.01) # Algunos valores que puede tomar la v.a. T con 7 gl
y <- dt(x, df = 7) # Valores correspondientes de la densidad t de Student con 7 gl
plot(x, y, type = "l", main = "Densidad t de Student, gl = 7", xlab="", ylab="")
abline(v = 0, lwd=2, lty=2)
pt(q = 1.5, df = 7)
plot(x, y, type = "l", main = "Densidad t de Student, gl = 7", xlab="", ylab="")
polygon(c(min(x), x[x<=1.5], 1.5), c(0, y[x<=1.5], 0), col="purple")
pt(q = 2, df = 7, lower.tail = FALSE)
plot(x, y, type = "l", main = "Densidad t de Student, gl = 7", xlab="", ylab="")
polygon(c(2, x[x>=2], max(x)), c(0, y[x>=2], 0), col="orange")
(d <- qt(p = 0.025, df = 7))
pt(q = d, df = 7)
plot(x, y, type = "l", main = "Densidad t de Student, gl = 7", xlab="", ylab="")
axis(side = 1, at = d, font = 2, padj = 1, lwd = 2)
set.seed(777) # Para poder reproducir la muestra en el futuro
muestra <- rt(n = 1000, df = 7)
length(muestra); mdf <- as.data.frame(muestra)
tail(mdf)
ggplot(mdf, aes(muestra)) +
geom_histogram(colour = 'green',
fill = 'orange',
alpha = 0.7, # Intensidad del color fill
binwidth = 0.5) +
geom_density(aes(y = 0.5*..count..))+
geom_vline(xintercept = mean(mdf$muestra), linetype="dashed", color = "black") +
ggtitle('Histograma para la muestra t de Student') +
labs(x = 'Valores obtenidos', y = 'Frecuencia')+
theme_light() +
theme(plot.title = element_text(hjust = 0.5, size = 16))
mean(muestra)
# 1.- La probabilidad de observar exactamente 10 Ã©xitos
dbinom (x = 10, size = n, prob = p)
n <- 35
p <- 0.51
# 1.- La probabilidad de observar exactamente 10 Ã©xitos
dbinom (x = 10, size = n, prob = p)
?pbinom()
# 2.- La probabilidad de observar 10 o mÃ¡s exitos
pbinom(q = 10, size = n, prob = p, lower.tail = FALSE)
# 2.- La probabilidad de observar 10 o mÃ¡s exitos
pbinom(q = 10, size = n, prob = p, lower.tail = TRUE)
FALSE
# 2.- La probabilidad de observar 10 o mÃ¡s exitos
pbinom(q = 10, size = n, prob = p, lower.tail = FALSE)
# 3.- El cuantil de orden 0.5
qbinom(p = 0.50, size = n, prob = p)
# 4.- Genere una muestra aleatoria de tamaÃ±o 1000 de esta distribuciÃ³n,
# construya una tabla de frecuencias relativas con los resultados y realice el grÃ¡fico de barras
# de los resultados que muestre las frecuencias relativas.
muestra <- rbinom(n = 1000, size = n, prob = p)
df1 <- as.data.frame(table(muestra)/length(muestra))
names(df1) <- c("Exitos", "FR")
df1
ggplot(df1, aes(x = Exitos, y = FR, fill = variable)) +
geom_bar (stat="identity", position = "dodge")
ggplot(df1, aes(x = Exitos, y = FR, fill = variable)) +
geom_bar ()
ggplot(df1, aes(x = Exitos, y = FR)) +
geom_bar (stat="identity", position = "dodge")
# Considere una variable aleatoria normal con media 110 y desviaciÃ³n estÃ¡ndar 7. Realice lo siguiente:
mean <- 110
std <- 7
# 1.- Grafique la funciÃ³n de densidad de probabilidad
x <- seq(-4, 4, 0.01)*std + mean
y <- dnorm(x, mean = mean, sd = std)
plot(x, y, type = "l", xlab = "", ylab = "")
title(main = "Densidad de Probabilidad Normal", sub = expression(paste(mu == mean, " y ", sigma == std)))
abline(v = 175, lwd = 2, lty = 2)
abline(v = mean, lwd = 2, lty = 2)
# 1.- La probabilidad de observar exactamente 10 Ã©xitos
dbinom (x = 10, size = n, prob = p)
# 2.- La probabilidad de observar 10 o mÃ¡s exitos
pbinom(q = 10, size = n, prob = p, lower.tail = FALSE)
# 3.- El cuantil de orden 0.5
qbinom(p = 0.50, size = n, prob = p)
# 2.- Encuentre la probabilidad de que la v.a. sea mayor o igual a 140
pnorm(q = 182, mean = mean, sd = std, lower.tail = FALSE)
# 3.- Encuentre el cuantil de orden 0.95
qnorm(p = 0.95, mean = mean, sd = std)
ggplot(mdf, aes(muestra)) +
geom_histogram(colour = 'red',
fill = 'blue',
alpha = 0.3, # Intensidad del color fill
binwidth = 3) +
geom_density(aes(y = 3*..count..))+
geom_vline(xintercept = mean(mdf$muestra), linetype="dashed", color = "black") +
ggtitle('Histograma para la muestra normal') +
labs(x = 'Valores obtenidos', y = 'Frecuencia')+
theme_dark() +
theme(plot.title = element_text(hjust = 0.5, size = 16))
mdf <- as.data.frame(muestra)
ggplot(mdf, aes(muestra)) +
geom_histogram(colour = 'red',
fill = 'blue',
alpha = 0.3, # Intensidad del color fill
binwidth = 3) +
geom_density(aes(y = 3*..count..))+
geom_vline(xintercept = mean(mdf$muestra), linetype="dashed", color = "black") +
ggtitle('Histograma para la muestra normal') +
labs(x = 'Valores obtenidos', y = 'Frecuencia')+
theme_dark() +
theme(plot.title = element_text(hjust = 0.5, size = 16))
ggplot(mdf, aes(muestra)) +
geom_histogram(colour = 'red',
fill = 'blue',
alpha = 0.3, # Intensidad del color fill
binwidth = 3) +
geom_density(aes(y = 3*..count..))+
ggtitle('Histograma para la muestra normal') +
labs(x = 'Valores obtenidos', y = 'Frecuencia')+
theme_dark() +
theme(plot.title = element_text(hjust = 0.5, size = 16))
ggplot(mdf, aes(muestra)) +
geom_histogram(colour = 'red',
fill = 'blue',
alpha = 0.3, # Intensidad del color fill
binwidth = 3) +
geom_vline(xintercept = mean(mdf$muestra), linetype="dashed", color = "black") +
ggtitle('Histograma para la muestra normal') +
labs(x = 'Valores obtenidos', y = 'Frecuencia')+
theme_dark() +
theme(plot.title = element_text(hjust = 0.5, size = 16))
ggplot(mdf, aes(muestra)) +
geom_histogram(colour = 'red',
fill = 'blue',
alpha = 0.3, # Intensidad del color fill
binwidth = 3) +
geom_vline(xintercept = mean(mdf$muestra), linetype="dashed", color = "black") +
ggtitle('Histograma para la muestra normal') +
labs(x = 'Valores obtenidos', y = 'Frecuencia')+
theme(plot.title = element_text(hjust = 0.5, size = 16))
ggplot(mdf, aes(muestra)) +
geom_histogram(colour = 'red',
fill = 'blue', # Intensidad del color fill
binwidth = 3) +
geom_vline(xintercept = mean(mdf$muestra), linetype="dashed", color = "black") +
ggtitle('Histograma para la muestra normal') +
labs(x = 'Valores obtenidos', y = 'Frecuencia')+
theme(plot.title = element_text(hjust = 0.5, size = 16))
set.seed(104)
muestra <- rexp(n = 40, rate = 6) # media = 1/6 aprox 0.1667 (media de la poblaciÃ³n)
tail(as.data.frame(muestra))
z0 <- (mean(muestra)-0.1)/(sd(muestra)/sqrt(40))
z0
(z.05 <- qnorm(p = 0.05, lower.tail = FALSE))
z0 > z.05
(pvalue <- pnorm(z0, lower.tail = FALSE))
x <- seq(-4, 4, 0.01)
y <- dnorm(x)
plot(x, y, type = "l", xlab="", ylab="")
title(main = "Densidad normal estÃ¡ndar", sub = expression(paste(mu == 0, " y ", sigma == 1)))
polygon(c(z0, x[x>=z0], max(x)), c(0, y[x>=z0], 0), col="red")
axis(side = 1, at = z0, font = 2, padj = 1, lwd = 2)
set.seed(174)
muestra <- sample(x = c(1, 0), size = 45, replace = TRUE, prob = c(0.67, 0.33)); 0.67 # media real de la poblaciÃ³n
tail(as.data.frame(muestra))
z0 <- (mean(muestra)-0.9)/sqrt((0.9*(1-0.9))/45)
z0
(z.05 <- qnorm(p = 0.05))
z0 < z.05
(pvalue <- pnorm(z0)) # p-value muy pequeÃ±o
set.seed(174376)
m1 <- rexp(n = 56, rate = 4.1); 1/4.1 # media real de la poblaciÃ³n
tail(as.data.frame(m1))
m2 <- rexp(n = 63, rate = 3.4); 1/3.4 # media real de la poblaciÃ³n
tail(as.data.frame(m2))
1/4.1-1/3.4 # diferencia de medias real
z0 <- (mean(m1)-mean(m2)-0)/sqrt(var(m1)/56 + var(m2)/63)
z0
(z.025 <- qnorm(p = 0.025, lower.tail = FALSE))
(z0 < -z.025) | (z0 > z.025)
(pvalue <- 2*pnorm(z0, lower.tail = FALSE))
x <- seq(-4, 4, 0.01)
y <- dnorm(x)
plot(x, y, type = "l", xlab="", ylab="")
title(main = "Densidad normal estÃ¡ndar", sub = expression(paste(mu == 0, " y ", sigma == 1)))
polygon(c(min(x), x[x<=-z0], -z0), c(0, y[x<=-z0], 0), col="purple")
axis(side = 1, at = -z0, font = 2, padj = 1, lwd = 2)
polygon(c(z0, x[x>=z0], max(x)), c(0, y[x>=z0], 0), col="purple")
axis(side = 1, at = z0, font = 2, padj = 1, lwd = 2)
z0
(z.025 <- qnorm(p = 0.025, lower.tail = FALSE))
