# fechas). Con ayuda de la función rbind forma un único data frame que contenga las
# seis columnas mencionadas en el punto 3 (Hint 2: la función do.call podría ser utilizada).
head(ñista[1])
# 4.- Asegúrate de que los elementos de las columnas correspondientes de los nuevos
# data frames sean del mismo tipo (Hint 1: usa as.Date y mutate para arreglar las
# fechas). Con ayuda de la función rbind forma un único data frame que contenga las
# seis columnas mencionadas en el punto 3 (Hint 2: la función do.call podría ser utilizada).
head(lista[1])
lista[1] <- mutate(lista[0], Date = as.Date(Date, "%d-%m-%y"))
class(lista[1])
summary(lista[1])
lista[1] <- mutate(lista[1], Date = as.Date(Date, "%d-%m-%y"))
lista[1] <- mutate(as.list.data.frame( lista[1]), Date = as.Date(Date, "%d-%m-%y"))
lista[1] <- mutate(lista[1], Date = as.Date(Date, "%d-%m-%y"))
lista[2] <- mutate(lista[1], Date = as.Date(Date, "%d-%m-%Y"))
lista[1] <- mutate(lista[1], Date = as.Date(Date, "%d-%m-%y"))
setwd("C:/Users/alana/Documents/GitHub/Data-Science/Modulo 2/Sesion 2/Postwork Files")
u1718 <- "https://www.football-data.co.uk/mmz4281/1718/SP1.csv"
u1819 <- "https://www.football-data.co.uk/mmz4281/1819/SP1.csv"
u1920 <- "https://www.football-data.co.uk/mmz4281/1920/SP1.csv"
u2021 <- "https://www.football-data.co.uk/mmz4281/2021/SP1.csv"
download.file(url = u1718, destfile = "SP1-1718.csv", mode = "wb")
download.file(url = u1819, destfile = "SP1-1819.csv", mode = "wb")
download.file(url = u1920, destfile = "SP1-1920.csv", mode = "wb")
download.file(url = u2021, destfile = "SP1-2021.csv", mode = "wb")
lista <- lapply(dir(), read.csv)
# 2.- Obten una mejor idea de las características de los data frames al usar las
# funciones: str, head, View y summary
str(lista[1])
head(lista[1])
View(lista[1])
# 3.- Con la función select del paquete dplyr selecciona únicamente las columnas
# Date, HomeTeam, AwayTeam, FTHG, FTAG y FTR; esto para cada uno de los data frames.
library(dplyr)
lista <- lapply(lista, select, Date,HomeTeam,AwayTeam,FTHG,FTAG,FTR)
head(lista[[1]]); head(lista[[2]]); head(lista[[3]]); head(lista[[4]])
lista[[1]] <- mutate(lista[[1]], Date = as.Date(Date, "%d-%m-%y"))
# 4.- Asegúrate de que los elementos de las columnas correspondientes de los nuevos
# data frames sean del mismo tipo (Hint 1: usa as.Date y mutate para arreglar las
# fechas). Con ayuda de la función rbind forma un único data frame que contenga las
# seis columnas mencionadas en el punto 3 (Hint 2: la función do.call podría ser utilizada).
head(lista[1])
setwd("C:/Users/alana/Documents/GitHub/Data-Science/Modulo 2/Sesion 2/Postwork Files")
lista <- lapply(dir(), read.csv)
lista <- lapply(lista, select, Date,HomeTeam,AwayTeam,FTHG,FTAG,FTR)
head(lista[[1]]); head(lista[[2]]); head(lista[[3]])
lista[[1]] <- mutate(lista[[1]], Date = as.Date(Date, "%d/%m/%y"))
head(lista[1])
View(lista[1])
View(lista[[1]])
head(lista[2])
lista[[2]] <- mutate(lista[[2]], Date = as.Date(Date, "%d/%m/%Y"))
View(lista[[1]])
View(lista[[2]])
View(lista[[3]])
lista[[3]] <- mutate(lista[[3]], Date = as.Date(Date, "%d/%m/%Y"))
View(lista[[3]])
data <- do.call(rbind, lista)
head(data)
tail(data)
View(lista[[3]])
View(data)
View(lista[[3]])
View(lista[[1]])
a
View(lista[[2]])
setwd("C:/Users/alana/Documents/GitHub/Data-Science/Modulo 2/Sesion 2/Postwork Files")
lista <- lapply(dir(), read.csv)
# 3.- Con la función select del paquete dplyr selecciona únicamente las columnas
# Date, HomeTeam, AwayTeam, FTHG, FTAG y FTR; esto para cada uno de los data frames.
library(dplyr)
lista <- lapply(lista, select, Date,HomeTeam,AwayTeam,FTHG,FTAG,FTR)
head(lista[[1]]); head(lista[[2]]); head(lista[[3]])
lista[[1]] <- mutate(lista[[1]], Date = as.Date(Date, "%d/%m/%y"))
lista[[2]] <- mutate(lista[[2]], Date = as.Date(Date, "%d/%m/%Y"))
lista[[3]] <- mutate(lista[[3]], Date = as.Date(Date, "%d/%m/%Y"))
data <- do.call(rbind, lista)
head(data)
tail(data)
library(ggplot2)
names(mtcars)
ggplot(mtcars, aes(x=cyl, y = hp, colour = mpg )) +
geom_point()  # Tipo de geometrÃ­a, intenta utilizar alguna otra
names(mtcars)
ggplot(mtcars, aes(x=cyl, y = hp, colour = mpg )) +
geom_point() +
theme_gray() +   # Temas (inteta cambiarlo)
facet_wrap("cyl")  # Lo divide por el nÃºm de cilindros
ggplot(mtcars, aes(x = cyl, y = hp, colour = mpg )) +
geom_point() +
theme_gray() +   # Temas (inteta cambiarlo)
facet_wrap("cyl") +  # Lo divide por el nÃºm de cilindros
xlab('NÃºm de cilindros') +  # Nombre en los ejes
ylab('Caballos de Fuerza')
library(dplyr)
data2 <- read.csv("C:/Users/alana/Documents/GitHub/Data-Science/Modulo 2/Sesion 3/Data/boxp.csv")
head(data2)
names(data2)
data <- mutate(data2, Mediciones = Mediciones*1.23)
hist(data$Mediciones, breaks = seq(0,360, 20),
main = "Histograma de Mediciones",
xlab = "Mediciones",
ylab = "Frecuencia")
data <- na.omit(data)
data %>%
ggplot() +
aes(Mediciones) +
geom_histogram(binwidth = 10)
data %>%
ggplot() +
aes(Mediciones) +
geom_histogram(binwidth = 10, col="black", fill = "blue") +
ggtitle("Histograma de Mediciones") +
ylab("Frecuencia") +
xlab("Mediciones") +
theme_light()
data <- read.csv("C:/Users/alana/Documents/GitHub/Data-Science/Modulo 2/Sesion 3/R1 Data/BD_Altura_Alunos.csv")
names(data)
hist(data$Mediciones, breaks = seq(0,360, 20),
main = "Histograma de Altura de Alumnos",
xlab = "Mediciones",
ylab = "Frecuencia")
str(data)
data <- mutate(data,  Aluno.Altura = as.numeric(Aluno.Altura))
hist(data$Mediciones, breaks = seq(0,360, 20),
main = "Histograma de Altura de Alumnos",
xlab = "Mediciones",
ylab = "Frecuencia")
str(data)
data <- read.csv("C:/Users/alana/Documents/GitHub/Data-Science/Modulo 2/Sesion 3/R1 Data/BD_Altura_Alunos.csv")
data <- read.csv("C:/Users/alana/Documents/GitHub/Data-Science/Modulo 2/Sesion 3/R1 Data/BD_Altura_Alunos.csv")
names(data)
str(data)
hist(data$Mediciones, breaks = seq(0,360, 20),
main = "Histograma de Altura de Alumnos",
xlab = "Mediciones",
ylab = "Frecuencia")
str(data)
hist(data$Altura, breaks = seq(0,360, 20),
main = "Histograma de Altura de Alumnos",
xlab = "Mediciones",
ylab = "Frecuencia")
hist(data$Altura, breaks = seq(0,50, 5),
main = "Histograma de Altura de Alumnos",
xlab = "Mediciones",
ylab = "Frecuencia")
hist(data$Altura, breaks = seq(0,60, 5),
main = "Histograma de Altura de Alumnos",
xlab = "Mediciones",
ylab = "Frecuencia")
hist(data$Altura, breaks = seq(0,60, 2),
main = "Histograma de Altura de Alumnos",
xlab = "Mediciones",
ylab = "Frecuencia")
str(data)
hist(data$Altura, breaks = seq(120,200, 5),
main = "Histograma de Altura de Alumnos",
xlab = "Mediciones",
ylab = "Frecuencia")
data <- read.csv("C:/Users/alana/Documents/GitHub/Data-Science/Modulo 2/Sesion 3/R1 Data/BD_Altura_Alunos.csv")
names(data)
str(data)
hist(data$Altura, breaks = seq(120,200, 5),
main = "Histograma de Altura de Alumnos",
xlab = "Mediciones",
ylab = "Frecuencia")
ggplot
ggplot
(my_scatplot <- ggplot(mtcars,
aes(x = wt, y = mpg)) +
geom_point())
(my_scatplot <- ggplot(mtcars,
aes(x=wt,y=mpg)) +
geom_point() +
geom_smooth(method = "lm", se = T))  # modelo lineal, cambia el parametro `se`, este hace referencia al intervalo de confianza
(my_scatplot <- ggplot(mtcars,
aes(x=wt,y=mpg)) +
geom_point() +
geom_smooth(method = "lm", se = F))  # modelo lineal, cambia el parametro `se`, este hace referencia al intervalo de confianza
my_scatplot + xlab('Weight (x 1000lbs)') + ylab('Miles per Gallon')
my_scatplot + labs(x='Weight (x1000lbs)',y='Miles per Gallon',colour='Number of\n Cylinders')
(my_scatplot <- ggplot(mtcars, aes(x = wt, y = mpg, col = cyl)) + geom_point())
my_scatplot + facet_wrap("cyl")
my_scatplot + facet_grid(am~cyl)
data2 <- read.csv("C:/Users/alana/Documents/GitHub/Data-Science/Modulo 2/Sesion 3/players_stats.csv")
str(data2)
data2 %>%
ggplot() +
aes(MIN) +
geom_histogram(binwidth = 10)
data2 %>%
ggplot() +
aes(MIN) +
geom_histogram(binwidth = 20)
data2 %>%
ggplot() +
aes(MIN) +
geom_histogram(binwidth = 50)
data2 %>%
ggplot() +
aes(MIN) +
geom_histogram(binwidth = 100)
data2 %>%
ggplot() +
aes(MIN) +
geom_histogram(binwidth = 100, fill = "blue") +
ggtitle("Histograma de Mediciones") +
ylab("Frecuencia") +
xlab("Mediciones") +
theme_light()
data2 %>%
ggplot() +
aes(MIN) +
geom_histogram(binwidth = 100, fill = "blue") +
ggtitle("Histograma de Mediciones") +
ylab("Frecuencia") +
xlab("Mediciones") +
geom_smooth(method = "mean", se = F))+
theme_light()
mean(data2$MIN)
data2 %>%
ggplot() +
aes(MIN) +
geom_histogram(binwidth = 100, fill = "blue") +
ggtitle("Histograma de Mediciones") +
ylab("Frecuencia") +
xlab("Mediciones") +
theme_light()
?geom_point()
?geom_histogram()
data2 %>%
ggplot() +
aes(MIN) +
geom_histogram(binwidth = 100, fill = "blue") +
ggtitle("Histograma de Mediciones") +
ylab("Frecuencia") +
xlab("Mediciones") +
theme_light()
data2 %>%
ggplot() +
aes(MIN) +
geom_histogram(binwidth = 50, fill = "blue") +
ggtitle("Histograma de Mediciones") +
ylab("Frecuencia") +
xlab("Mediciones") +
theme_light()
data2 %>%
ggplot() +
aes(MIN) +
geom_histogram(binwidth = 100, fill = "blue") +
ggtitle("Histograma de Mediciones") +
ylab("Frecuencia") +
xlab("Mediciones") +
theme_light()
data2 %>%
ggplot() +
aes(MIN) +
geom_histogram(binwidth = 100, fill = "blue") +
ggtitle("Histograma de Mediciones") +
ylab("Frecuencia") +
xlab("Mediciones") +
geom_vline(xintercept =  mean(data2$MIN), col = "red", lwd = 1.5, lty =2)+
theme_light()
data2 %>%
ggplot() +
aes(AGE) +
geom_histogram(binwidth = 100, fill = "blue") +
ggtitle("Histograma de Mediciones") +
ylab("Frecuencia") +
xlab("Mediciones") +
geom_vline(xintercept =  mean(data2$AGE), col = "red", lwd = 1.5, lty =2)+
theme_light()
data2 %>%
ggplot() +
aes(Age) +
geom_histogram(binwidth = 100, fill = "blue") +
ggtitle("Histograma de Mediciones") +
ylab("Frecuencia") +
xlab("Mediciones") +
geom_vline(xintercept =  mean(data2$Age), col = "red", lwd = 1.5, lty =2)+
theme_light()
data2 %>%
ggplot() +
aes(Age) +
geom_histogram(binwidth = 10, fill = "blue") +
ggtitle("Histograma de Mediciones") +
ylab("Frecuencia") +
xlab("Mediciones") +
geom_vline(xintercept =  mean(data2$Age), col = "red", lwd = 1.5, lty =2)+
theme_light()
data2 %>%
ggplot() +
aes(Age) +
geom_histogram(binwidth = 1, fill = "blue") +
ggtitle("Histograma de Mediciones") +
ylab("Frecuencia") +
xlab("Mediciones") +
geom_vline(xintercept =  mean(data2$Age), col = "red", lwd = 1.5, lty =2)+
theme_light()
data2 %>%
ggplot() +
aes(Age) +
geom_histogram(binwidth = 2, fill = "blue") +
ggtitle("Histograma de Mediciones") +
ylab("Frecuencia") +
xlab("Mediciones") +
geom_vline(xintercept =  mean(data2$Age), col = "red", lwd = 1.5, lty =2)+
theme_light()
data2 %>%
ggplot() +
aes(Age) +
geom_histogram(binwidth = 2, fill = "blue") +
ggtitle("Histograma de Mediciones") +
ylab("Frecuencia") +
xlab("Mediciones") +
geom_vline(xintercept =  na.omit(mean(data2$Age)), col = "red", lwd = 1.5, lty =2)+
theme_light()
data2 %>%
ggplot() +
aes(Age) +
geom_histogram(binwidth = 2, fill = "blue") +
ggtitle("Histograma de Mediciones") +
ylab("Frecuencia") +
xlab("Mediciones") +
geom_vline(xintercept =  na.omit(mean(data2$Age)), col = "red", lwd = 1.5, lty =2)+
theme_light()
data2 %>%
ggplot() +
aes(Age) +
geom_histogram(binwidth = 2, fill = "blue") +
ggtitle("Histograma de Mediciones") +
ylab("Frecuencia") +
xlab("Mediciones") +
geom_vline(xintercept =  mean(na.omit(data2$Age)), col = "red", lwd = 1.5, lty =2)+
theme_light()
(my_scatplot <- ggplot(mtcars,
aes(x = wt, y = mpg)) +
geom_point())
(my_scatplot <- ggplot(data2,
aes(x = Weight, y = Height)) +
geom_point())
?which.max
which.max(data2$Height)
pos <- which.max(data2$Height)
paste("El jugador más alto es: ",data2$Name[pos])
paste("El jugador más alto es: ",data2$Name[pos],", con una altura de: ",data2$Height)
paste("El jugador más alto es: ",data2$Name[pos],", con una altura de: ",data2$Height[pos])
paste("El jugador más bajito es: ",data2$Name[pos],", con una altura de: ",data2$Height[pos])
pos <- which.min(data2$Height)
paste("El jugador más bajito es: ",data2$Name[pos],", con una altura de: ",data2$Height[pos])
paste("La altura promedio es: ",mean(na.omit(data2$Height)))
data2 %>% ggplot( aes(AST.TOV, PTS )) +
geom_point() +
facet_wrap("Pos")
data <- read.csv("C:/Users/alana/Documents/GitHub/Data-Science/Modulo 2/Sesion 3/Data/boxp.csv")
library(ggplot2)
library(dplyr)
head(data2)
data2 <- read.csv("C:/Users/alana/Documents/GitHub/Data-Science/Modulo 2/Sesion 3/Data/boxp.csv")
head(data2)
names(data2)
data <- mutate(data2, Mediciones = Mediciones*1.23)
head(data)
summary(data)
bien <- complete.cases(data)
data <- data[bien,]
data <- mutate(data, Categoria = factor(Categoria), Grupo = factor(Grupo))
head(data)
ggplot(data, aes(x = Categoria, y = Mediciones, fill = Grupo)) + geom_boxplot() +
ggtitle("Boxplots") +
xlab("Categorias") +
ylab("Mediciones")
ggplot(data, aes(x = Categoria, y = Mediciones, fill = Grupo)) + geom_boxplot() +
scale_fill_discrete(name = "Dos Gps", labels = c("G1", "G2")) +
ggtitle("Boxplots") +
xlab("Categorias") +
ylab("Mediciones")
library(dplyr)
getwd()
setwd("C:/Users/alana/Documents/GitHub/Data-Science/Modulo 2/Sesion 3")
url1 <- "https://data.humdata.org/hxlproxy/data/download/time_series_covid19_confirmed_global_narrow.csv?dest=data_edit&filter01=explode&explode-header-att01=date&explode-value-att01=value&filter02=rename&rename-oldtag02=%23affected%2Bdate&rename-newtag02=%23date&rename-header02=Date&filter03=rename&rename-oldtag03=%23affected%2Bvalue&rename-newtag03=%23affected%2Binfected%2Bvalue%2Bnum&rename-header03=Value&filter04=clean&clean-date-tags04=%23date&filter05=sort&sort-tags05=%23date&sort-reverse05=on&filter06=sort&sort-tags06=%23country%2Bname%2C%23adm1%2Bname&tagger-match-all=on&tagger-default-tag=%23affected%2Blabel&tagger-01-header=province%2Fstate&tagger-01-tag=%23adm1%2Bname&tagger-02-header=country%2Fregion&tagger-02-tag=%23country%2Bname&tagger-03-header=lat&tagger-03-tag=%23geo%2Blat&tagger-04-header=long&tagger-04-tag=%23geo%2Blon&header-row=1&url=https%3A%2F%2Fraw.githubusercontent.com%2FCSSEGISandData%2FCOVID-19%2Fmaster%2Fcsse_covid_19_data%2Fcsse_covid_19_time_series%2Ftime_series_covid19_confirmed_global.csv"
url2 <- "https://data.humdata.org/hxlproxy/data/download/time_series_covid19_deaths_global_narrow.csv?dest=data_edit&filter01=explode&explode-header-att01=date&explode-value-att01=value&filter02=rename&rename-oldtag02=%23affected%2Bdate&rename-newtag02=%23date&rename-header02=Date&filter03=rename&rename-oldtag03=%23affected%2Bvalue&rename-newtag03=%23affected%2Binfected%2Bvalue%2Bnum&rename-header03=Value&filter04=clean&clean-date-tags04=%23date&filter05=sort&sort-tags05=%23date&sort-reverse05=on&filter06=sort&sort-tags06=%23country%2Bname%2C%23adm1%2Bname&tagger-match-all=on&tagger-default-tag=%23affected%2Blabel&tagger-01-header=province%2Fstate&tagger-01-tag=%23adm1%2Bname&tagger-02-header=country%2Fregion&tagger-02-tag=%23country%2Bname&tagger-03-header=lat&tagger-03-tag=%23geo%2Blat&tagger-04-header=long&tagger-04-tag=%23geo%2Blon&header-row=1&url=https%3A%2F%2Fraw.githubusercontent.com%2FCSSEGISandData%2FCOVID-19%2Fmaster%2Fcsse_covid_19_data%2Fcsse_covid_19_time_series%2Ftime_series_covid19_deaths_global.csv"
download.file(url = url1, destfile = "st19ncov-confirmados.csv", mode = "wb")
conf <- read.csv(url1)
mu <- read.csv(url2)
conf <- read.csv(url1)
head(conf)
mu <- read.csv(url2)
Sconf <- conf[-1, ]
Smu <- mu[-1, ]
summary(Sconf)
Sconf <- select(Sconf, Country.Region, Date, Value) # PaÃ­s,
Sconf <- rename(Sconf, Country = Country.Region, Infectados = Value) # Cambiamos el nombre de las variables
Sconf <- mutate(Sconf, Date = as.Date(Date, "%Y-%m-%d"), Infectados = as.numeric(Infectados)) # Transformamos la variable
# Seleccionamos paÃ­s, fecha y acumulado de muertos
Smu <- select(Smu, Country.Region, Date, Value)
Smu <- rename(Smu, Country = Country.Region, Muertos = Value) # Renombramos
Smu <- mutate(Smu, Date = as.Date(Date, "%Y-%m-%d"), Muertos = as.numeric(Muertos)) # Transformamos
# Unimos infectados y muertos acumulados para cada fecha
Scm <- merge(Sconf, Smu)
mex <- filter(Scm, Country == "Mexico") # Seleccionamos sÃ³lo a MÃ©xico
mex <- filter(mex, Infectados != 0) # Comienzan los infectados en MÃ©xico
mex <- mutate(mex, NI = c(1, diff(Infectados))) # Nuevos infectados por dÃ­a
mex <- mutate(mex, NM = c(0, diff(Muertos))) # Nuevos muertos por dÃ­a
mex <- mutate(mex, Letalidad = round(Muertos/Infectados*100, 1)) # Tasa de letalidad
mex <- mutate(mex, IDA = lag(Infectados), MDA = lag(Muertos)) # Valores dÃ­a anterior
mex <- mutate(mex, FCI = Infectados/IDA, FCM = Muertos/MDA) # Factores de Crecimiento
esion_03
write.csv(mex, "../Sesion_03/C19Mexico.csv")
# library(dplyr)
library(ggplot2)
library(scales)
mex <- read.csv("C19Mexico.csv")
mex
head(mex); tail(mex)
mex <- mutate(mex, Date = as.Date(Date, "%Y-%m-%d"))
p <- ggplot(mex, aes(x=Date, y=Infectados)) +
geom_line( color="blue") +
geom_point() +
labs(x = "Fecha",
y = "Acumulado de casos confirmados",
title = paste("Confirmados de COVID-19 en MÃ©xico:",
format(Sys.time(),
tz="America/Mexico_City",
usetz=TRUE))) +
theme(plot.title = element_text(size=12))  +
theme(axis.text.x = element_text(face = "bold", color="#993333" ,
size = 10, angle = 45,
hjust = 1),
axis.text.y = element_text(face = "bold", color="#993333" ,
size = 10, angle = 45,
hjust = 1))  # color, Ã¡ngulo y estilo de las abcisas y ordenadas
p <- p  + scale_x_date(labels = date_format("%d-%m-%Y")) # paquete scales
p <- p +
theme(plot.margin=margin(10,10,20,10), plot.caption=element_text(hjust=1.05, size=10)) +
annotate("text", x = mex$Date[round(dim(mex)[1]*0.4)], y = max(mex$Infectados), colour = "blue", size = 5, label = paste("Ãltima actualizaciÃ³n: ", mex$Infectados[dim(mex)[1]]))
p
p <- ggplot(mex, aes(x=Date, y=Infectados)) +
geom_line( color="blue") +
geom_point() +
labs(x = "Fecha",
y = "Acumulado de casos confirmados",
title = paste("Confirmados de COVID-19 en México:",
format(Sys.time(),
tz="America/Mexico_City",
usetz=TRUE))) +
theme(plot.title = element_text(size=12))  +
theme(axis.text.x = element_text(face = "bold", color="#993333" ,
size = 10, angle = 45,
hjust = 1),
axis.text.y = element_text(face = "bold", color="#993333" ,
size = 10, angle = 45,
hjust = 1))  # color, Ã¡ngulo y estilo de las abcisas y ordenadas
p <- p  + scale_x_date(labels = date_format("%d-%m-%Y")) # paquete scales
p <- p +
theme(plot.margin=margin(10,10,20,10), plot.caption=element_text(hjust=1.05, size=10)) +
annotate("text", x = mex$Date[round(dim(mex)[1]*0.4)], y = max(mex$Infectados), colour = "blue", size = 5, label = paste("Ãltima actualizaciÃ³n: ", mex$Infectados[dim(mex)[1]]))
p
w.brazil <- read.csv("/Data/station_fortaleza.csv")
getwd()
w.brazil <- read.csv("../Data/station_fortaleza.csv")
w.brazil <- read.csv("C:/Users/alana/Documents/GitHub/Data-Science/Modulo 2/Sesion 3/Data/station_fortaleza.csv")
head(w.brazil)
w.brazil <- w.brazil[, -c(1,14:18)]
tail(w.brazil)
class(w.brazil)
plot(w.brazil)
w.brazil <- w.brazil %>% filter(JAN<50,FEB<50,	MAR<50,	APR<50,	MAY<50,	JUN<50,	JUL<50,	AUG<50,	SEP<50,	OCT<50,	NOV<50,	DEC<50)
plot(w.brazil)
bras <- apply(w.brazil, 2, c)
class(bras)
bra1 <-  as.vector(t(bras))
tsb <- ts(bra1, start = c(1946,01), frequency = 12)
class(tsb)
summary(tsb)
start(tsb); end(tsb); frequency(tsb)  # Inicio, fin y frecuencia de la serie
plot(tsb, main = "Serie de tiempo", ylab = "Temp", xlab = "AÃ±o")
plot(tsb, main = "Serie de tiempo", ylab = "Temp", xlab = "Año")
tsbd <- decompose(tsb, type = "additive")
plot(tsbd$trend)  # GrÃ¡fica  de la tendencia
plot(tsbd$seasonal) # GrÃ¡fica  de la temporalidad
plot(tsb, main = "Serie de tiempo", ylab = "Temp", xlab = "Año")
plot(tsbd$trend)  # GrÃ¡fica  de la tendencia
install.packages("TSA")
library(TSA)
AP <- AirPassengers
ts(AP)
plot (ts(AP))
d
d <- decompose(tsb, type = "additive")
d
plot(d)
da <- decompose(apts, type = "additive")
plot(da)
apts <- ts(AP)
da <- decompose(apts, type = "additive")
plot(da)
ts(AP)
plot (ts(AP))
apts <- ts(AP)
plot (apts)
da <- decompose(apts, type = "additive")
da <- decompose(ts(AP), type = "additive")
da <- decompose(AP, type = "additive")
plot(da)
dm <- decompose(AP, type = "additive")
plot(dm)
plot(da)
dm <- decompose(AP, type = "multiplicative")
plot(dm)
plot(da)
plot(dm)
