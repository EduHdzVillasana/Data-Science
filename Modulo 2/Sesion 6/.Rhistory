#     Asigna estos data frames a variables llamadas anotaciones y equipos.
listasoccer <- create.fbRanks.dataframes("soccer.csv")
data
# Postwork Sesión 5
# Equipo 12
library(dplyr)
library(fbRanks)
setwd("C:/Users/alana/Documents/GitHub/Data-Science/Modulo 2/Sesion 5/Postwork Files")
# 1.- A partir del conjunto de datos de soccer de la liga española de las temporadas
#     2017/2018, 2018/2019 y 2019/2020, crea el data frame SmallData, que contenga las
#     columnas date, home.team, home.score, away.team y away.score; esto lo puedes
#     hacer con ayuda de la función select del paquete dplyr. Luego crea un directorio
#     de trabajo y con ayuda de la función write.csv guarde el data frame como un archivo
#     csv con nombre soccer.csv. Puedes colocar como argumento row.names = FALSE en write.csv.
lista <- lapply(dir(), read.csv)
lista <- lapply(lista, select, Date,HomeTeam,FTHG,AwayTeam,FTAG)
lista[[1]] <- mutate(lista[[1]], Date = as.Date(Date, "%d/%m/%y"))
lista[[2]] <- mutate(lista[[2]], Date = as.Date(Date, "%d/%m/%Y"))
lista[[3]] <- mutate(lista[[3]], Date = as.Date(Date, "%d/%m/%Y"))
data <- do.call(rbind, lista)
data
colnames(data)
colnames(data) <- c("date", "home.team", "home.score", "awat.team", "away.score")
colnames(data)
data
write.csv(data,"soccer.csv", row.names = FALSE)
# 2.- Con la función create.fbRanks.dataframes del paquete fbRanks importa el archivo soccer.csv
#     a R y al mismo tiempo asignarlo a una variable llamada listasoccer. Se creará una lista
#     con los elementos scores y teams que son data frames listos para la función rank.teams.
#     Asigna estos data frames a variables llamadas anotaciones y equipos.
listasoccer <- create.fbRanks.dataframes("soccer.csv")
# Postwork Sesión 5
# Equipo 12
library(dplyr)
library(fbRanks)
setwd("C:/Users/alana/Documents/GitHub/Data-Science/Modulo 2/Sesion 5/Postwork Files")
# 1.- A partir del conjunto de datos de soccer de la liga española de las temporadas
#     2017/2018, 2018/2019 y 2019/2020, crea el data frame SmallData, que contenga las
#     columnas date, home.team, home.score, away.team y away.score; esto lo puedes
#     hacer con ayuda de la función select del paquete dplyr. Luego crea un directorio
#     de trabajo y con ayuda de la función write.csv guarde el data frame como un archivo
#     csv con nombre soccer.csv. Puedes colocar como argumento row.names = FALSE en write.csv.
lista <- lapply(dir(), read.csv)
lista <- lapply(lista, select, Date,HomeTeam,FTHG,AwayTeam,FTAG)
lista[[1]] <- mutate(lista[[1]], Date = as.Date(Date, "%d/%m/%y"))
lista[[2]] <- mutate(lista[[2]], Date = as.Date(Date, "%d/%m/%Y"))
lista[[3]] <- mutate(lista[[3]], Date = as.Date(Date, "%d/%m/%Y"))
data <- do.call(rbind, lista)
colnames(data) <- c("date", "home.team", "home.score", "away.team", "away.score")
data
write.csv(data,"soccer.csv", row.names = FALSE)
# 2.- Con la función create.fbRanks.dataframes del paquete fbRanks importa el archivo soccer.csv
#     a R y al mismo tiempo asignarlo a una variable llamada listasoccer. Se creará una lista
#     con los elementos scores y teams que son data frames listos para la función rank.teams.
#     Asigna estos data frames a variables llamadas anotaciones y equipos.
listasoccer <- create.fbRanks.dataframes("soccer.csv")
listasoccer
anotaciones <- listasoccer$scores
equipos <- listasoccer$teams
?unique()
# 3.- Con ayuda de la función unique crea un vector de fechas (fecha) que no se repitan y que
#     correspondan a las fechas en las que se jugaron partidos. Crea una variable llamada n
#     que contenga el número de fechas diferentes. Posteriormente, con la función rank.teams
#     y usando como argumentos los data frames anotaciones y equipos, crea un ranking de equipos
#     usando únicamente datos desde la fecha inicial y hasta la penúltima fecha en la que se
#     jugaron partidos, estas fechas las deberá especificar en max.date y min.date. Guarda los
#     resultados con el nombre ranking.
fecha <- unique(anotaciones$date)
fecha
lenght(fecha)
dim(fecha)
len(fecha)
length(fecha)
n <- length(fecha)
?rank.teams()
min.date <- fecha[1]
max.date <- fecha[n-1]
min.date
max.date
ranking <- rank.teams(scores = anotaciones, teams = equipos, max.date = max.date, min.date = min.date)
ranking
?predict
predict(ranking)
p <- predict(ranking)
p
p
?filter()
?filter()
aPredecir <- filter(anotaciones, date == fecha[n])
aPredecir
fecha[n]
fecha[n-1]
fecha[n-2]
?predict
predict(rankings, newdata = aPredecir)
predict(rankings, aPredecir)
predict(ranking, date = fecha[n])
aPredecir
library(TSA)
data(oilfilters); plot(oilfilters, type = "o", ylab = "Ventas", xlab = "Tiempo", main = "Ventas Mesuales ")
plot(oilfilters, type = "l", ylab = "Ventas", xlab = "Tiempo",
main = "Ventas Mensuales de Filtro de Aceite",
sub = "Símbolos Especiales")
data(oilfilters); plot(oilfilters, type = "o", ylab = "Ventas", xlab = "Tiempo", main = "Ventas Mesuales ")
plot(oilfilters, type = "l", ylab = "Ventas", xlab = "Tiempo",
main = "Ventas Mensuales de Filtro de Aceite",
sub = "Símbolos Especiales")
points(y = oilfilters, x = time(oilfilters),
pch = as.vector(season(oilfilters)))
data(AirPassengers)
AP <- AirPassengers
AP
class(AP)
start(AP); end(AP); frequency(AP)
summary(AP)
plot(AP, ylab = "Pasajeros (1000's)", xlab = "Tiempo",
main = "Reserva de pasajeros aéreos internacionales",
sub = "Estados Unidos en el periodo 1949-1960")
layout(1:2)
plot(aggregate(AP), xlab = "Tiempo",
main = "Reserva de pasajeros aéreos internacionales",
sub = "Estados Unidos en el periodo 1949-1960")
boxplot(AP ~ cycle(AP),
xlab = "Boxplot de valores estacionales",
sub = "Estados Unidos en el periodo 1949-1960",
main = "Reserva de pasajeros aéreos internacionales")
dev.off()
CBE <- read.csv("cbe.csv", header = TRUE)
getwd()
resetwd()
setwd("C:/Users/alana/Documents/GitHub/Data-Science/Modulo 2/Sesion 6")
CBE <- read.csv("cbe.csv", header = TRUE)
CBE[1:4,]
class(CBE)
Elec.ts <- ts(CBE[, 3], start = 1958, freq = 12)
Beer.ts <- ts(CBE[, 2], start = 1958, freq = 12)
Choc.ts <- ts(CBE[, 1], start = 1958, freq = 12)
Electricidad <- Elec.ts
Cerveza <- Beer.ts
Chocolate <- Choc.ts
plot(cbind(Electricidad, Cerveza, Chocolate),
main = "Producción de Chocolate, Cerveza y Electricidad",
xlab = "Tiempo",
sub = "Enero de 1958 - Diciembre de 1990")
Global <- scan("global.txt")
Global.ts <- ts(Global, st = c(1856, 1), end = c(2005, 12), fr = 12)
Global.annual <- aggregate(Global.ts, FUN = mean)
plot(Global.ts, xlab = "Tiempo", ylab = "Temperatura en Â°C", main = "Serie de Temperatura Global",
sub = "Serie mensual: Enero de 1856 a Diciembre de 2005")
plot(Global.annual, xlab = "Tiempo", ylab = "Temperatura en Â°C", main = "Serie de Temperatura Global",
sub = "Serie anual de temperaturas medias: 1856 a 2005")
New.series <- window(Global.ts, start = c(1970, 1), end = c(2005, 12))
New.time <- time(New.series)
plot(New.series, xlab = "Tiempo", ylab = "Temperatura en Â°C", main = "Serie de Temperatura Global",
sub = "Serie mensual: Enero de 1970 a Diciembre de 2005"); abline(reg = lm(New.series ~ New.time))
CBE <- read.csv("cbe.csv", header = TRUE)
Elec.ts <- ts(CBE[, 3], start = 1958, freq = 12)
Elec.decom.A <- decompose(Elec.ts)
plot(Elec.decom.A, xlab = "Tiempo",
sub = "Descomposición de los datos de producción de electricidad")
Tendencia <- Elec.decom.A$trend
Estacionalidad <- Elec.decom.A$seasonal
Aleatorio <- Elec.decom.A$random
ts.plot(cbind(Tendencia, Tendencia + Estacionalidad),
xlab = "Tiempo", main = "Datos de Producción de Electricidad",
ylab = "Producción de electricidad", lty = 1:2,
sub = "Tendencia con efectos estacionales aditivos sobrepuestos")
Tendencia[20] + Estacionalidad[20] + Aleatorio[20]
Elec.ts[20]
Elec.decom.M <- decompose(Elec.ts, type = "mult")
plot(Elec.decom.M, xlab = "Tiempo",
sub = "Descomposición de los datos de producción de electricidad")
set.seed(1)
w <- rnorm(100)
plot(w, type = "l", xlab = "")
title(main = "Ruido Blanco Gaussiano", xlab = "Tiempo")
x <- seq(-3, 3, length = 1000)
hist(rnorm(100), prob = T, ylab = "", xlab = "", main = "")
points(x, dnorm(x), type = "l")
title(ylab = "Densidad", xlab = "Valores simulados de la distribución normal estandar",
main = "Comparación de una muestra con su población subyacente")
set.seed(2)
acf(rnorm(100), main = "")
title(main = "Función de Autocorrelación Muestral",
sub = "Valores simulados de la distribución normal estandar")
acf(w, main = "")
acf(rnorm(100), main = "")
title(main = "Función de Autocorrelación Muestral",
sub = "Valores simulados de la distribución normal estandar")
set.seed(2)
acf(rnorm(100), main = "")
title(main = "Función de Autocorrelación Muestral",
sub = "Valores simulados de la distribución normal estandar")
x <- w <- rnorm(1000)
for(t in 2:1000) x[t] <- x[t-1] + w[t]
plot(x, type = "l", main = "Caminata Aleatoria Simulada",
xlab = "t", ylab = expression(x[t]),
sub = expression(x[t]==x[t-1]+w[t]))
acf(x, main = "")
title(main = "Correlograma para la caminata aleatoria simulada",
sub = expression(x[t]==x[t-1]+w[t]))
x <- w <- rnorm(1000)
for(t in 2:1000) x[t] <- x[t-1] + w[t]
plot(x, type = "l", main = "Caminata Aleatoria Simulada",
xlab = "t", ylab = expression(x[t]),
sub = expression(x[t]==x[t-1]+w[t]))
acf(x, main = "")
title(main = "Correlograma para la caminata aleatoria simulada",
sub = expression(x[t]==x[t-1]+w[t]))
acf(diff(x), main = "")
title(main = "Correlograma de la serie de diferencias",
sub = expression(nabla*x[t]==x[t]-x[t-1]))
rho <- function(k, alpha) alpha^k
plot(0:10, rho(0:10, 0.7), type = "h", ylab = "", xlab = "")
title(main = "Correlograma para un proceso AR(1)",
ylab = expression(rho[k] == alpha^k),
xlab = "lag k",
sub = expression(x[t]==0.7*x[t-1]+w[t]))
plot(0:10, rho(0:10, -0.7), type = "h", ylab = "", xlab = "")
title(main = "Correlograma para un proceso AR(1)",
ylab = expression(rho[k] == alpha^k),
xlab = "lag k",
sub = expression(x[t]==-0.7*x[t-1]+w[t]))
abline(h = 0)
set.seed(1)
x <- w <- rnorm(100)
for(t in 2:100) x[t] <- 0.7 * x[t-1] + w[t]
plot(x, type = "l", xlab = "", ylab = "")
title(main = "Proceso AR(1) simulado",
xlab = "Tiempo",
ylab = expression(x[t]),
sub = expression(x[t]==0.7*x[t-1]+w[t]))
acf(x, main = "")
title(main = "Correlograma del proceso AR(1) simulado",
sub = expression(x[t]==0.7*x[t-1]+w[t]))
pacf(x, main = "")
title(main = "Correlograma Parcial del proceso AR(1) simulado",
sub = expression(x[t]==0.7*x[t-1]+w[t]))
x.ar <- ar(x, method = "mle")
x.ar$order
x.ar$ar
x.ar$ar + c(-2, 2)*sqrt(x.ar$asy.var)
Global <- scan("global.txt")
Global.ts <- ts(Global, st = c(1856, 1), end = c(2005, 12), fr = 12)
Global.annual <- aggregate(Global.ts, FUN = mean)
plot(Global.ts, xlab = "Tiempo", ylab = "Temperatura en Â°C",
main = "Serie de Temperatura Global",
sub = "Serie mensual: Enero de 1856 a Diciembre de 2005")
plot(Global.annual, xlab = "Tiempo", ylab = "Temperatura en Â°C",
main = "Serie de Temperatura Global",
sub = "Serie anual de temperaturas medias: 1856 a 2005")
mean(Global.annual)
Global.ar <- ar(Global.annual, method = "mle")
Global.ar$order
Global.ar$ar
acf(Global.ar$res[-(1:Global.ar$order)], lag = 50, main = "")
title(main = "Correlograma de la serie de residuales",
sub = "Modelo AR(4) ajustado a la serie de temperaturas globales anuales")
rho <- function(k, beta){
q <- length(beta) - 1
if(k > q) ACF <- 0 else {
s1 <- 0; s2 <- 0
for(i in 1:(q-k+1)) s1 <- s1 + beta[i]*beta[i + k]
for(i in 1:(q+1)) s2 <- s2 + beta[i]^2
ACF <- s1/s2}
ACF}
beta <- c(1, 0.7, 0.5, 0.2)
rho.k <- rep(1, 10)
for(k in 1:10) rho.k[k] <- rho(k, beta)
plot(0:10, c(1, rho.k), ylab = expression(rho[k]), xlab = "lag k", type = "h",
sub = expression(x[t] == w[t] + 0.7*w[t-1] + 0.5*w[t-2] + 0.2*w[t-3]),
main = "Función de autocorrelación para un proceso MA(3)")
abline(0, 0)
beta <- c(1, -0.7, 0.5, -0.2)
rho.k <- rep(1, 10)
for(k in 1:10) rho.k[k] <- rho(k, beta)
plot(0:10, c(1, rho.k), ylab = expression(rho[k]), xlab = "lag k", type = "h",
sub = expression(x[t] == w[t] - 0.7*w[t-1] + 0.5*w[t-2] - 0.2*w[t-3]),
main = "Función de autocorrelación para un proceso MA(3)")
abline(0, 0)
set.seed(1)
b <- c(0.8, 0.6, 0.4)
x <- w <- rnorm(1000)
for(t in 4:1000){
for(j in 1:3) x[t] <- x[t] + b[j]*w[t-j]
}
plot(x, type = "l", ylab = expression(x[t]), xlab = "Tiempo t",
sub = expression(x[t] == w[t] + 0.8*w[t-1] + 0.6*w[t-2] + 0.4*w[t-3]),
main = "Serie de tiempo simulada de un proceso MA(3)")
acf(x, main = "")
title(main = "Correlograma para un proceso MA(3) simulado",
sub = expression(x[t] == w[t] + 0.8*w[t-1] + 0.6*w[t-2] + 0.4*w[t-3]))
x.ma <- arima(x, order = c(0, 0, 3))
x.ma
set.seed(1)
x <- arima.sim(n = 10000, list(ar = -0.6, ma = 0.5))
plot(x[1:100], type = "l", xlab = "")
title(main = "Serie simulada", xlab = "Tiempo",
sub = expression(x[t] == -0.6*x[t-1] + w[t] + 0.5*w[t-1]))
coef(arima(x, order = c(1, 0, 1)))
CBE <- read.csv("cbe.csv", header = TRUE)
Elec.ts <- ts(CBE[, 3], start = 1958, freq = 12)
plot(Elec.ts, xlab = "", ylab = "")
title(main = "Serie de Producción de Electricidad",
xlab = "Tiempo",
ylab = "Producción de electricidad")
plot(log(Elec.ts), xlab = "", ylab = "")
title(main = "Serie-log de Producción de Electricidad",
xlab = "Tiempo",
ylab = "Log de Producción de electricidad")
Time <- 1:length(Elec.ts)
Imth <- cycle(Elec.ts)
Elec.lm <- lm(log(Elec.ts) ~ Time + I(Time^2) + factor(Imth))
acf(resid(Elec.lm), main = "")
title(main = "Correlograma de la serie de residuales del modelo de regresión",
sub = "Serie de producción de electricidad")
plot(resid(Elec.lm), type = "l", main = "", xlab = "", ylab = "")
title(main = "Serie de residuales del modelo de regresión ajustado",
sub = "Serie de producción de electricidad",
xlab = "Tiempo",
ylab = "Residuales")
best.order <- c(0, 0, 0)
best.aic <- Inf
for(i in 0:2)for(j in 0:2){
model <- arima(resid(Elec.lm), order = c(i, 0, j))
fit.aic <- AIC(model)
if(fit.aic < best.aic){
best.order <- c(i, 0, j)
best.arma <- arima(resid(Elec.lm), order = best.order)
best.aic <- fit.aic
}
}
best.order
acf(resid(best.arma), main = "")
title(main = "Serie de residuales del modelo ARMA(2, 0) ajustado",
sub = "Serie de residuales del modelo de regresión ajustado a los datos de electricidad")
new.time <- seq(length(Elec.ts)+1, length = 36)
new.data <- data.frame(Time = new.time, Imth = rep(1:12, 3))
predict.lm <- predict(Elec.lm, new.data)
predict.arma <- predict(best.arma, n.ahead = 36)
elec.pred <- ts(exp(predict.lm + predict.arma$pred), start = 1991, freq = 12)
ts.plot(cbind(Elec.ts, elec.pred), lty = 1:2,
col = c("blue", "red"), xlab = "Tiempo",
ylab = "Producción de electricidad",
main = "Predicción de los datos de producción de electricidad",
sub = "Predicción de 36 meses")
# Reto 1
# 1.- Simula un proceso AR(1) de la forma x[t] = 0.5 * x[t-1] + w[t] para t = 1, 2, ..., 200
#     y muestra grÃ¡ficamente la serie de tiempo obtenida
x <- w <- rnorm(200)
for(t in 2:200)
{
x[t] <- 0.5 * x[t-1] + w[t]
}
plot(x, type = "l", xlab = "", ylab = "")
title(main = "proceso ar(1) simulado",
xlab = "tiempo",
ylab = expression(x[t]),
sub = expression(x[t]==0.5*x[t-1]+w[t]))
title(main = "proceso ar(1) simulado",
xlab = "tiempo",
ylab = expression(x[t]))
# Reto 1
# 1.- Simula un proceso AR(1) de la forma x[t] = 0.5 * x[t-1] + w[t] para t = 1, 2, ..., 200
#     y muestra grÃ¡ficamente la serie de tiempo obtenida
x <- w <- rnorm(200)
for(t in 2:200)
{
x[t] <- 0.5 * x[t-1] + w[t]
}
plot(x, type = "l", xlab = "", ylab = "")
title(main = "proceso ar(1) simulado",
xlab = "tiempo",
ylab = expression(x[t]))
acf(x, main = "")
title(main = "Correlograma",
sub = expression(x[t]==0.5*x[t-1]+w[t]))
pacf(x, main = "")
title(main = "Correlograma Parcial",
sub = expression(x[t]==0.5*x[t-1]+w[t]))
x.ar <- ar(x, method = "mle")
x.ar$order
x.ar$ar
CBE <- read.csv("cbe.csv", header = TRUE)
Elec.ts <- ts(CBE[, 3], start = 1958, freq = 12)
plot(Elec.ts, xlab = "", ylab = "")
title(main = "Serie de Producción de Electricidad Australiana",
ylab = "Producción de electricidad (GWh)",
xlab = "Tiempo")
plot(diff(Elec.ts), xlab = "", ylab = "")
title(main = "Serie Diferenciada de Producción de Electricidad Australiana",
xlab = "Tiempo", ylab = "Dif Serie",
sub = "Gráfica de la serie diferenciada de primer órden")
plot(diff(log(Elec.ts)), xlab = "", ylab = "")
title(main = "Serie de log dif de Producción de Electricidad Australiana",
xlab = "Tiempo", ylab = "Dif log-Serie",
sub = "Gráfica de la serie log-transformada diferenciada de primer órden")
set.seed(1)
x <- w <- rnorm(1000)
for(i in 3:1000) x[i] <- 0.5*x[i-1] + x[i-1] - 0.5*x[i-2] + w[i] + 0.3*w[i-1]
plot(x, type = "l",
main = "Serie simulada de un modelo ARIMA(1, 1, 1)",
xlab = "Tiempo",
ylab = expression(x[t]),
sub = expression(x[t] == 0.5*x[t-1] + x[t-1] - 0.5*x[t-2] + w[t] + 0.3*w[t-1]))
arima(x, order = c(1, 1, 1))
x <- arima.sim(model = list(order = c(1, 1, 1), ar = 0.5, ma = 0.3), n = 1000)
arima(x, order = c(1, 1, 1))
CBE <- read.csv("cbe.csv", header = TRUE)
Beer.ts <- ts(CBE[, 2], start = 1958, freq = 12)
plot(Beer.ts, xlab = "", ylab = "")
title(main = "Serie de Producción de Cerveza en Australia",
ylab = "Producción de Cerveza (Megalitros)",
xlab = "Mes")
Beer.ima <- arima(Beer.ts, order = c(0, 1, 1))
Beer.ima
acf(resid(Beer.ima), main = "")
title(main = "Autocorrelaciones para los Residuales del Ajuste",
sub = expression(x[t]==x[t-1]+w[t]-0.33*w[t-1]))
Beer.1991 <- predict(Beer.ima, n.ahead = 12)
sum(Beer.1991$pred)
x <- arima.sim(model = list(order = c(1, 1, 1), ar = 0.6, ma = 0.2), n = 1000)
fit <- arima(x, order = c(1, 1, 1))
coefficients(fit)
acf(resid(fit), main = "")
pred <- predict(fit, n.ahead = 3)
pred$pred
acf(resid(Beer.ima), main = "")
title(main = "Autocorrelaciones para los Residuales del Ajuste",
sub = expression(x[t]==x[t-1]+w[t]-0.33*w[t-1]))
sum(Beer.1991$pred)
CBE <- read.csv("cbe.csv", header = TRUE)
Elec.ts <- ts(CBE[, 3], start = 1958, freq = 12)
plot(Elec.ts, xlab = "", ylab = "")
title(main = "Serie de Producción de Electricidad Australiana",
ylab = "Producción de electricidad (GWh)",
xlab = "Tiempo")
plot(log(Elec.ts), xlab = "", ylab = "")
title(main = "Log de Serie de Producción de Electricidad Australiana",
ylab = "Log de Producción de electricidad (GWh)",
xlab = "Tiempo")
Elec.AR <- arima(log(Elec.ts), order = c(1, 1, 0),
seas = list(order = c(1, 0, 0), 12))
Elec.MA <- arima(log(Elec.ts), order = c(0, 1, 1),
seas = list(order = c(0, 0, 1), 12))
AIC(Elec.AR)
AIC(Elec.MA)
get.best.arima <- function(x.ts, maxord = c(1, 1, 1, 1, 1, 1)){
best.aic <- 1e8
n <- length(x.ts)
for(p in 0:maxord[1])for(d in 0:maxord[2])for(q in 0:maxord[3])
for(P in 0:maxord[4])for(D in 0:maxord[5])for(Q in 0:maxord[6])
{
fit <- arima(x.ts, order = c(p, d, q),
seas = list(order = c(P, D, Q),
frequency(x.ts)), method = "CSS")
fit.aic <- -2*fit$loglik + (log(n) + 1)*length(fit$coef)
if(fit.aic < best.aic){
best.aic <- fit.aic
best.fit <- fit
best.model <- c(p, d, q, P, D, Q)
}
}
list(best.aic, best.fit, best.model)
}
best.arima.elec <- get.best.arima(log(Elec.ts),
maxord = c(2, 2, 2, 2, 2, 2))
best.fit.elec <- best.arima.elec[[2]]  # Modelo
best.arima.elec[[3]] # Tipo de modelo (órdenes)
best.fit.elec
best.arima.elec[[1]] # AIC
acf(resid(best.fit.elec), main = "")
title(main = "Correlograma de los residuales del ajuste")
pr <- predict(best.fit.elec, 12)$pred
ts.plot(cbind(window(Elec.ts, start = 1981),
exp(pr)), col = c("blue", "red"), xlab = "")
title(main = "Predicción para la serie de producción de electricidad",
xlab = "Mes",
ylab = "Producción de electricidad (GWh)")
pred$pred
# Retos Sesion 6
# Reto 1
# 1.- Simula un proceso AR(1) de la forma x[t] = 0.5 * x[t-1] + w[t] para t = 1, 2, ..., 200
#     y muestra grÃ¡ficamente la serie de tiempo obtenida
x <- w <- rnorm(200)
for(t in 2:200)
{
x[t] <- 0.5 * x[t-1] + w[t]
}
plot(x, type = "l", xlab = "", ylab = "")
title(main = "proceso ar(1) simulado",
xlab = "tiempo",
ylab = expression(x[t]))
# 2.- ObtÃ©n el correlograma y el correlograma parcial del proceso AR(1) simulado
acf(x, main = "")
title(main = "Correlograma",
sub = expression(x[t]==0.5*x[t-1]+w[t]))
pacf(x, main = "")
title(main = "Correlograma Parcial",
sub = expression(x[t]==0.5*x[t-1]+w[t]))
# 3.- Ajusta un modelo autorregresivo a la serie simulada utilizando la funciÃ³n ar, observa
#     el orden del modelo y el parÃ¡metro estimado (los parÃ¡metros estimados)
x.ar <- ar(x, method = "mle")
x.ar$order
x.ar$ar
# Reto 2
x <- arima.sim(model = list(order = c(1, 1, 1), ar = 0.6, ma = 0.2), n = 1000)
fit <- arima(x, order = c(1, 1, 1))
coefficients(fit)
acf(resid(fit), main = "")
pred <- predict(fit, n.ahead = 3)
pred$pred
